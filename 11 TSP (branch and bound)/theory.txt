PROGRAM LOGIC: 
TSP using Dynamic Programming: Let the given set of vertices be {1, 2, 3, 4,….n}. Let us consider 1 as starting and ending point of output. For every other vertex i (other than 1), we find the minimum cost path with 1 as the starting point, i as the ending point and all vertices appearing exactly once. Let the cost of this path be cost(i), the cost of corresponding Cycle would be cost(i) + dist(i, 1) where dist(i, 1) is the distance from i to 1. Finally, we return the minimum of all [cost(i) + dist(i, 1)] values. This looks simple so far. Now the question is how to get cost(i)? To calculate cost(i) using Dynamic Programming, we need to have some recursive relation in terms of sub-problems. Let us define a term C(S, i) be the cost of the minimum cost path visiting each vertex in set S exactly once, starting at 1 and ending at i. We start with all subsets of size 2 and calculate C(S, i) for all subsets where S is the subset, then we calculate C(S, i) for all subsets S of size 3 and so on. Note that 1 must be present in every subset. 
If size of S is 2, then S must be {1,i}, 
C(S,i) = dist(1,i) 
Else if size of S is greater than 2. 
C(S,i) = min {C(S-{i},j) + dis(j,i)} where j belongs to S, 
j != i and j != 1. 

For a set of size n, we consider n-2 subsets each of size n-1 such that all subsets don’t have nth in them. Using the above recurrence relation, we can write dynamic programming-based solution. There are at most O(n*2n) subproblems, and each one takes linear time to solve. The total running time is therefore O(n2*2n). The time complexity is much less than O(n!), but still exponential. Space required is also exponential. So this approach is also infeasible even for slightly higher number of vertices. 

PSEUDOCODE: 

In this algorithm, we take a subset N of the required cities needs to be visited, distance among the cities dist and starting city s as inputs. Each city is identified by unique city id like {1,2,3, …., n}. 
Initially, all cities are unvisited, and the visit starts from the city s . We assume that the initial travelling cost is equal to 0. Next, the TSP distance value is calculated based on a recursive function. If the number of cities in the subset is two, then the recursive function returns their distance as a base case.
On the other hand, if the number of cities is greater than 2, then we’ll calculate the distance from the current city to the nearest city, and the minimum distance among the remaining cities is calculated recursively. 
Finally, the algorithm returns the minimum distance as a TSP solution. 
Here we use a dynamic approach to calculate the cost function Cost(). Using recursive calls, we calculate the cost function for each subset of the original problem. 
In the dynamic algorithm for TSP, the number of possible subsets can be at most N*2N. Each subset can be solved in O(N) times. Therefore, the time complexity of this algorithm would be O(N2*2N).
