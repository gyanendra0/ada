PROGRAM LOGIC: 
1) Create a set S that keeps track of vertices included in shortest path tree, i.e., whose minimum distance from source is calculated and finalized. Initially, this set is empty. 
2) Assign a distance value to all vertices in the input graph. Initialize all distance values as INFINITE. Assign distance value as 0 for the source vertexso that it is picked first. 

3) While S doesn’t include all vertices 
a) Pick a vertex u which is not there in S and has minimum distance value. 
b) Include u to S. 
c) Update distance value of all adjacent vertices of u. 

To update the distance values, iterate through all adjacent vertices. For every adjacent vertex v, if sum of distance value of u (from source) and weight of edge u-v, is less than the distance value of v, then update the distance value of v. 

PSEUDOCODE: 
A min-priority queue is an abstract data type that provides 3 basic operations : add_with_priority(), decrease_priority() and extract_min(). As mentioned earlier, using such a data structure can lead to faster computing times than using a basic queue
1 function Dijkstra(Graph, source): 
2 dist[source] ← 0 // Initialization 
3 
4 create vertex priority queue Q 
5 
6 for each vertex v in Graph: 
7 if v ≠ source 
8 dist[v] ← INFINITY // Unknown distance from source to v 
9 prev[v] ← UNDEFINED // Predecessor of v 
10 
11 Q.add_with_priority(v, dist[v]) 
12 
13 
14 while Q is not empty: // The main loop 
15 u ← Q.extract_min() // Remove and return best vertex 
16 for each neighbor v of u: // only v that are still in Q 
17 alt ← dist[u] + length(u, v) 
18 if alt < dist[v] 
19 dist[v] ← alt 
20 prev[v] ← u 
21 Q.decrease_priority(v, alt) 
22 
23 return dist, prev
